plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '4.15.2'
    id "com.github.hierynomus.license" version "0.15.0"
    id "org.owasp.dependencycheck" version "5.3.2.1"
    id "com.dorongold.task-tree" version "1.5"
    id 'checkstyle'
}

group='com.ibm.dba.bai'
def artifact="bai-emitter-samples"
version='1.0.0-SNAPSHOT'

sourceCompatibility = 1.8

// load dependencies definition
apply from: 'dependencies.gradle'

repositories {
    jcenter()
    maven {
         url 'https://packages.confluent.io/maven/'
    }
}

def jks="internal/test/resources/eventstream/es-cert3.jks"

// generate jar with dependencies by default
jar {
    archivesBaseName = 'bai-event-emitter-samples'
    def jarSet = new java.util.HashSet()
    from configurations.compileClasspath.collect {
        if (it.isDirectory()) {
            return it
        }
        // to avoid adding the same jars twice
        if (!jarSet.contains(it.name)) {
            jarSet.add(it.name)
            return zipTree(it)
        }
        return null
    }
    exclude ('META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', '**/*.jar', '**/*.jnilib'
        , '**/*.so', '**/*.dll')
    manifest {
    }
}

artifactoryPublish.dependsOn('jar','generatePomFileForMavenJavaPublication')

artifactory {
    contextUrl = 'https://na.artifactory.swg-devops.com:443/artifactory'
    publish {
        defaults {
            publications('mavenJava')
        }
        repository {
            repoKey = 'hyc-taiga-maven-local'
            username = 'taiga_build@fr.ibm.com'
            password = System.getenv('ARTIFACTORY_UPLOAD_TOKEN')
            maven = true
        }
    }
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = artifact
            version = version
            from components.java
        }
    }
}

// export task
task export(type: Copy) {
  from (rootDir) {
      include (
              'src/**',
              'confluent.config',
              'eventstreams.config',
              'config/**',
              'bin/run-confluent-sample',
              'bin/common',
              'bin/run-eventstreams-sample',
              'bin/run-confluent-sample'
      )
      include ('README.md', 'LICENSE')
      include ('build.gradle', 'gradle/**', 'gradlew', 'gradlew.bat',
              'settings.gradle', 'dependencies.gradle')
  }
  into project.hasProperty('target')?target:"target-not-set"
}

// other plugins
dependencyCheck {
    scanConfigurations = ["compile"]
    outputDirectory = "build/reports"
    // Generate all reports so we can have both the XML and the HTML reports
    format = "ALL"
    analyzers {
        assemblyEnabled = false
    }
}

license {
    header rootProject.file('COPYRIGHT_HEADER')
    strictCheck true
    excludes(["**/*.json", "**/*.avsc"])
    include "**/*.java"
}
